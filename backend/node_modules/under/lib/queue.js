var proxy = require('./proxy');

var max_active = 100;
var debug      = process.env.debug;

var requests = {
  queued: [],
  active: 0
};

var log = function(str) {
  if (!debug) return;
  console.log(str);
}

////////////////////////////////////////////////////////////
// request pool handling
////////////////////////////////////////////////////////////

var queue_request = function(req, res, next) {
  if (!max_active) // if zero, then don't throttle
    return proxy_request(req, res);

  // req.pause();
  requests.queued.push([req, res]);
  check_queue();
}

var check_queue = function(){
  if (requests.queued.length > 0 && requests.active < max_active){
    requests.active++;
    var req_res = requests.queued.shift(); // returns first element
    proxy_request(req_res[0], req_res[1]);
  } else {
    log(requests.active + '/' + requests.queued.length + " [active/queued]");
  }
}

var proxy_request = function(req, res) {
  // req.resume();
  proxy.send(req, res, {}, function(err, req, res) {
    if (!max_active) return;
    --requests.active;
    check_queue();
  });
}

exports.setup = function(opts) {
  if (opts) proxy.setup(opts);

  if (opts && typeof opts.max_active == 'number')
    max_active = opts.max_active;

  if (opts && opts.debug)
    debug = opts.debug;

  return queue_request;
}

exports.stats = function() {
  return {
    queued:  requests.queued.length,
    active:  requests.active
  }
}
