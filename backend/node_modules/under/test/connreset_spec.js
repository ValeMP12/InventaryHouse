var http    = require('http'),
    needle  = require('needle'),
    should  = require('should'),
    sinon   = require('sinon'),
    under   = require('./..');

var ports ={
  outer: 3333,
  inner: 2222
}

var destroy_sockets = true;

// backend server waits 1 second to respond 'boo'
var backend  = http.createServer(function(req, res) {
  if (destroy_sockets) {
    // console.log('Destroying socket.');
    return req.connection.destroy();
  }

  // console.log('Valid request.');
  res.end('Hello.');
})

var send_request = function(cb) {
  needle.post('localhost:' + ports.outer, { foo: 'bar' }, function(err, resp, body) {
    cb(err, resp, body);
  })
}

describe('on ERRCONNRESET', function() {

  describe('and retry is false', function() {

    var frontend;

    before(function(done) {

      var proxy = under.proxy.setup({
        debug: false,
        retry_failed: false,
        backend: { host: 'localhost', port: ports.inner }
      })

      frontend = http.createServer(proxy);

      backend.listen(ports.inner, function() {
        frontend.listen(ports.outer, done)
      })
    })

    after(function(done) {
      backend.close(function() {
        frontend.close(done);
      })
    })

    it('doesnt break the connection', function(done) {
      send_request(function(err, resp, body) {
        should.not.exist(err);
        done();
      });
    });

    it('returns a 502', function(done) {
      send_request(function(err, resp, body) {
        resp.statusCode.should.equal(502);
        done();
      });
    })

    it('does not resend the request', function(done) {
      var spy = sinon.spy(http, 'request');

      send_request(function(err, resp, body) {
        spy.callCount.should.equal(2);
        spy.restore();
        done();
      });
    })

  })

  describe('and retry is true', function() {

    var frontend;

    before(function(done) {
      var proxy = under.proxy.setup({
        debug: false,
        retry_failed: true,
        backend: { host: 'localhost', port: ports.inner }
      })

      frontend = http.createServer(proxy);

      backend.listen(ports.inner, function() {
        frontend.listen(ports.outer, done)
      })
    })

    after(function(done) {
      backend.close(function() {
        frontend.close(done);
      })
    })

    it('resends the request', function(done) {
      var spy = sinon.spy(http, 'request');

      send_request(function(err, resp, body) {
        // console.log(spy.args);
        spy.callCount.should.equal(3);
        spy.restore();
        done();
      });
    })

    describe('and second request fails', function() {

      // this is basically the same test as above
      // but well keep it so the logic is better understood
      it('does not try again', function(done) {
        var spy = sinon.spy(http, 'request');

        send_request(function(err, resp, body) {
          spy.callCount.should.equal(3);
          spy.restore();
          done();
        });
      })

      it('returns a 502', function(done) {
        send_request(function(err, resp, body) {
          resp.statusCode.should.equal(502);
          done();
        });
      })

    })

    describe('and second request succeeds', function() {

      // requests are retried after one second. so we set a timeout
      // that will make the second request succeed
      beforeEach(function() {
        setTimeout(function() {
          destroy_sockets = false;
        }, 500);
      })

      afterEach(function() {
        destroy_sockets = true;
      })

      it('returns 200', function(done) {
        send_request(function(err, resp, body) {
          should.not.exist(err);
          resp.statusCode.should.equal(200);
          done();
        });
      })

    })

  })

})
