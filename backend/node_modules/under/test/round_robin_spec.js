var should  = require('should'),
    http    = require('http'),
    needle  = require('needle'),
    connect = require('connect')
    under   = require('./../');

describe('round robin', function() {
  
  var app,
      app_port = 4000,
      backends = [];

  var proxy_opts = {
    downcase: false, // just because
    backends: []
  } 
  
  var start_backend = function(port) {
    var server = http.createServer(function(req, res) {
      var wait = req.url.substr(1);
      setTimeout(function() {
        res.end('From ' + port);
      }, wait)
    });
    server.listen(port);
    return server;
  }
  
  before(function() {

     [8001, 8002, 8003].forEach(function(port) {
       backends.push(start_backend(port));
       proxy_opts.backends.push({ port: port })
     })

    app = connect()
     // .use(connect.logger({ immediate: false, format: 'dev' }))
     .use(under.proxy.setup(proxy_opts))
     .listen(app_port)
  })
  
  after(function() {
    app.close()
    backends.forEach(function(server) {
      server.close()
    })
  })
  
  it('works as expected', function(done) {
    var count = 6, resps = [];

    var check = function() {
      resps.should.eql(['From 8001', 'From 8002', 'From 8003', 'From 8001', 'From 8002', 'From 8003'])
      done()
    }
    
    for (var i = 0; i < count; i++) {
      setTimeout(function() {
        needle.get('localhost:' + app_port + '/0', function(err, resp, body) {
          resps.push(body.toString());
          --count || check();
        })
      }, i * 10) // make sure requests are received in order
    }
    
  })
  
})