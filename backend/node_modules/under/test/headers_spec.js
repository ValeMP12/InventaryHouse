var should   = require('should'),
    needle   = require('needle'),
    sinon    = require('sinon'),
    http     = require('http'),
    proxy    = require('./..').proxy;

var port = 6666;

describe('headers', function() {

  var frontend, backend;

  before(function(done) {

    // start a backend server that simply returns a JSON with the request
    // headers and body
    backend = http.createServer(function(req, res) {

      var data = {
        headers : req.headers,
        body    : ''
      }

      req.setEncoding('utf8'); // get data as string

      req.on('data', function(chunk) { data.body.push(chunk) });
      req.on('end', function() {
        res.writeHead(200, {'Content-Type' : 'application/json' });
        res.end(JSON.stringify(data));
      });

    });

    backend.listen(function() {
      var to_port = backend.address().port;

      var handler = proxy.setup({
        backend: {
          host: 'localhost',
          port: to_port
        }
      })

      frontend = http.createServer(handler);
      frontend.listen(port, done);
    });
  })

  after(function(done) {
    backend.close();
    frontend.close(done);
  })

  var send_request = function(url, headers, cb) {
    var opts = {
      parse      : true,
      headers    : headers
    }
    needle.get('http://localhost:' + port + url, opts, cb);
  };

  describe('forwarding to app', function() {

    describe('when X-Forwarded-For header is not present', function() {

      var headers = {};

      it('forwards the header to app', function(done) {
        send_request('/foobar', headers, function(err, resp, backend_request) {
          backend_request.headers.should.have.keys('accept', 'connection', 'user-agent', 'host', 'x-forwarded-for', 'x-forwarded-port', 'x-forwarded-proto');
          done();
        });
      });

      it('includes just one IP in list', function(done) {
        send_request('/foobar', headers, function(err, resp, backend_request) {
          backend_request.headers['x-forwarded-for'].should.equal('127.0.0.1');
          done();
        });
      });

    });

    describe('when X-Forwarded-For header IS present', function() {

      var headers = {'X-Forwarded-For': '12.34.56.78'};

      it('forwards the header to app', function(done) {
        send_request('/foobar', headers, function(err, resp, backend_request) {
          done();
        });
      });

      it('appends the source request IP in list', function(done) {
        send_request('/foobar', headers, function(err, resp, backend_request) {
          backend_request.headers['x-forwarded-for'].should.equal('12.34.56.78, 127.0.0.1');
          done();
        });
      });

    })

  });

})
